package fetch.cfg.device;

message PockelsCalibration
{ optional bool   calibrated = 1 [default=false];
  optional double v_zero     = 2 [default=0.0];
  optional double v_max      = 3 [default=0.0];
}

message NIDAQPockels
{ 
  optional  double    v_lim_max   = 1 [default=2.0];          // safety limit - high value
  optional  double    v_lim_min   = 2 [default=0.0];          // safety limit - low  value
  optional  double    v_open      = 3 [default=0.0];          // control voltage when pockels is maximally transmissive
  optional  double    v_closed    = 4 [default=0.0];          // control voltage when pockels is minimally transmissive
  optional  string    ao_channel  = 5 [default="/Dev1/ao2"];  // control channel
  optional  string    ai_channel  = 6 [default="/Dev1/ai16"]; // channel for reading off transmission
}

message vDAQPockels
{ 
  optional  double    v_lim_max   = 1 [default=2.0];          // safety limit - high value
  optional  double    v_lim_min   = 2 [default=0.0];          // safety limit - low  value
  optional  double    v_open      = 3 [default=0.0];          // control voltage when pockels is maximally transmissive
  optional  double    v_closed    = 4 [default=0.0];          // control voltage when pockels is minimally transmissive
  optional  int32     ao_channel  = 5 [default=2];            // control channel
  optional  int32     ai_channel  = 6 [default=-1];            // channel for reading off transmission
}

message SimulatedPockels
{
  optional double v_open = 1 [default=0.0];
}

message Target3d //DGA added for use as target position
{ optional float x = 1 [default=10.0];
  optional float y = 2 [default=10.0];
  optional float z = 3 [default=10.0];
}

message CalibrationStack //DGA added to allow for taking a calibration stack at specific x y and z
{
  optional double    v_open_percent      = 1 [default=0.0];          // control voltage when pockels is maximally transmissive
  repeated Target3d  target_mm   = 2;                        // DGA used as the target x,y and z postion      
}
message Pockels
{ enum PockelsType
  {
    Simulated = 0;
    NIDAQ     = 1;
    vDAQ      = 2;
  }
  enum LaserLineIdentifier
  { Chameleon = 0;
    Fianium   = 1;
  }
  optional PockelsType         kind        = 1 [default=vDAQ];

  required LaserLineIdentifier laser       = 2;
  optional string              name        = 3 [default="default"];
  optional PockelsCalibration  calibration = 4;

  optional NIDAQPockels        nidaq       = 5;
  optional SimulatedPockels    simulated   = 6;
  optional vDAQPockels         vdaq        = 7;

  optional CalibrationStack    calibration_stack = 8;
}